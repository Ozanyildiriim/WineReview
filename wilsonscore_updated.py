# -*- coding: utf-8 -*-
"""30 mart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-pwKrMOqCWvEwQSNd9CpGeaFlzoGOkf_
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
reviews = pd.read_csv('/content/drive/My Drive/wine_rev/winemag-data-130k-v2.csv', index_col=0)
pd.set_option("display.max_rows", 5)

reviews_150 = pd.read_csv('/content/drive/My Drive/wine_rev/150k cleaned.csv', index_col=0)

reviews = reviews.drop_duplicates()
reviews.info()

reviews_150 = reviews_150.drop_duplicates()
reviews_150.info()

pd.set_option("display.max_rows", 13)

reviews.isnull().sum()

reviews = reviews.dropna(subset=['country'])

reviews.isnull().sum()

dfr = reviews.drop(columns=['region_1','region_2','taster_name','taster_twitter_handle', 'designation'])

dataframe = reviews_150.drop(columns=['region_1','region_2', 'designation'])

dfr.info()

dataframe.info()

# concatenate the dataframes vertically
merged_dataframes = pd.concat([dfr, dataframe], axis=0)

# reset index of merged dataframe
merged_dataframes = merged_dataframes.reset_index(drop=True)

# print merged dataframe
print(merged_dataframes)

merged_dataframes.info()

merged_dataframes_var = merged_dataframes['variety'].value_counts()
merged_dataframes_var = pd.DataFrame(merged_dataframes['variety'].value_counts()).reset_index()
merged_dataframes_var.columns = ['variety', 'count']
merged_dataframes_var

# set the max_rows option to None
pd.set_option('display.max_rows', None)

# filter the dataframe to only include rows where the count is greater than 100
variety_counts_var_filtered = merged_dataframes_var[merged_dataframes_var['count'] > 100]


# display the entire filtered dataframe
print(variety_counts_var_filtered)

color_dict = {
    'Pinot Noir': 'Red',
    'Chardonnay': 'White',
    'Cabernet Sauvignon': 'Red',
    'Red Blend': 'Red',
    'Bordeaux-style Red Blend': 'Red',
    'Sauvignon Blanc': 'White',
    'Riesling': 'White',
    'Syrah': 'Red',
    'Merlot': 'Red',
    'Rosé': 'Rosé',
    'Zinfandel': 'Red',
    'Sangiovese': 'Red',
    'Malbec': 'Red',
    'White Blend': 'White',
    'Nebbiolo': 'Red',
    'Portuguese Red': 'Red',
    'Tempranillo': 'Red',
    'Sparkling Blend': 'Sparkling',
    'Rhône-style Red Blend': 'Red',
    'Pinot Gris': 'White',
    'Cabernet Franc': 'Red',
    'Champagne Blend': 'Sparkling',
    'Shiraz': 'Red',
    'Grüner Veltliner': 'White',
    'Bordeaux-style White Blend': 'White',
    'Pinot Grigio': 'White',
    'Viognier': 'White',
    'Corvina, Rondinella, Molinara': 'Red',
    'Portuguese White': 'White',
    'Gewürztraminer': 'White',
    'Sangiovese Grosso': 'Red',
    'Port': 'Red',
    'Gamay': 'Red',
    'Petite Sirah': 'Red',
    'Barbera': 'Red',
    'Tempranillo Blend': 'Red',
    'Carmenère': 'Red',
    'Chenin Blanc': 'White',
    'Grenache': 'Red',
    'Glera': 'Sparkling',
    'Albariño': 'White',
    'Pinot Blanc': 'White',
    'Rhône-style White Blend': 'White',
    'Moscato': 'White',
    'Nero d\'Avola': 'Red',
    'Aglianico': 'Red',
    'Prosecco': 'Sparkling',
    'Garnacha': 'Red',
    'Verdejo': 'White',
    'Sauvignon': 'White',
    'Garganega': 'White',
    'Torrontés': 'White',
    'Meritage': 'Red',
    'Petit Verdot': 'Red',
    'Primitivo': 'Red',
    'Montepulciano': 'Red',
    'Dolcetto': 'Red',
    'Blaufränkisch': 'Red',
    'Vermentino': 'White',
    'Mourvèdre': 'Red',
    'Melon': 'White',
    'Zweigelt': 'Red',
    'Tinta de Toro': 'Red',
    'Touriga Nacional': 'Red',
    'Mencía': 'Red',
    'Sémillon': 'White',
    'Roussanne': 'White',
    'Cabernet Sauvignon-Merlot': 'Red',
    'G-S-M': 'Red',
    'Cabernet Blend': 'Red',
    'Pinotage': 'Red',
    'Pinot Nero': 'Red',
    'Fiano': 'White',
    'Tannat': 'Red',
    'Muscat': 'White',
    'Pinot Bianco': 'White',
    'Monastrell': 'Red',
    'Grillo': 'White',
    'Turbiana': 'White',
    'Bonarda': 'Red',
    'Cabernet Sauvignon-Syrah': 'Red',
    'Verdicchio': 'White',
    'Viura': 'White',
    'Friulano': 'White',
    'Greco': 'White',
    'Nerello Mascalese': 'Red',
    'Vernaccia': 'White',
    'Alvarinho': 'White',
    'Grenache Blanc': 'White',
    'Sagrantino': 'Red',
    'Sherry': 'White',
    'Falanghina': 'White',
    'Malbec-Merlot': 'Red',
    'Tinto Fino': 'Red',
    'Godello': 'White',
    'Marsanne': 'White',
    'St. Laurent': 'Red',
    'Fumé Blanc': 'White',
    'Agiorgitiko': 'Red',
    'Negroamaro': 'Red',
    'Rosato': 'Rosé',
    'Arinto': 'White',
    'Ribolla Gialla': 'White',
    'Cortese': 'White',
    'Arneis': 'White',
    'Carignan': 'Red',
    'Sauvignon Blanc-Semillon': 'White',
    'Verdelho': 'White',
    'Spätburgunder': 'Red',
    'Austrian white blend': 'White',
    'Semillon-Sauvignon Blanc': 'White',
    'Tempranillo-Cabernet Sauvignon': 'Red'
}

# use map() to apply the dictionary to the variety column and create a new color column
variety_counts_var_filtered['color'] = variety_counts_var_filtered['variety'].map(color_dict)

# print the updated dataframe
print(variety_counts_var_filtered)

total_count_by_color = variety_counts_var_filtered.groupby('color')['count'].sum()

total_count_by_color

#import pycountry 
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt

"""
# Define a function to map province names to province codes
def get_province_code(country, province):
    # Check if the country is United States
    if country == "US":
        # Define a dictionary of province codes
        us_prov_codes = {
            "Alabama": "AL",
            "Alaska": "AK",
            "Arizona": "AZ",
            "Arkansas": "AR",
            "California": "CA",
            "Colorado": "CO",
            "Connecticut": "CT",
            "Delaware": "DE",
            "Florida": "FL",
            "Georgia": "GA",
            "Hawaii": "HI",
            "Idaho": "ID",
            "Illinois": "IL",
            "Indiana": "IN",
            "Iowa": "IA",
            "Kansas": "KS",
            "Kentucky": "KY",
            "Louisiana": "LA",
            "Maine": "ME",
            "Maryland": "MD",
            "Massachusetts": "MA",
            "Michigan": "MI",
            "Minnesota": "MN",
            "Mississippi": "MS",
            "Missouri": "MO",
            "Montana": "MT",
            "Nebraska": "NE",
            "Nevada": "NV",
            "New Hampshire": "NH",
            "New Jersey": "NJ",
            "New Mexico": "NM",
            "New York": "NY",
            "North Carolina": "NC",
            "North Dakota": "ND",
            "Ohio": "OH",
            "Oklahoma": "OK",
            "Oregon": "OR",
            "Pennsylvania": "PA",
            "Rhode Island": "RI",
            "South Carolina": "SC",
            "South Dakota": "SD",
            "Tennessee": "TN",
            "Texas": "TX",
            "Utah": "UT",
            "Vermont": "VT",
            "Virginia": "VA",
            "Washington": "WA",
            "West Virginia": "WV",
            "Wisconsin": "WI",
            "Wyoming": "WY"
        }
        # Look up the province code in the dictionary
        return us_prov_codes.get(province)
    else:
        return None

# Apply the function to create a new column for province codes
merged_dataframes["prov_code"] = merged_dataframes.apply(lambda x: get_province_code(x["country"], x["province"]), axis=1)

# Group by country and province, and mean the values
grouped_df = merged_dataframes.groupby(["country", "province", "prov_code"]).mean().reset_index()
"""

merged_dataframes.head()

merged_dataframes['price'].value_counts().sort_index().head(150).plot(kind = 'line', color = 'r',
label = 'price',linewidth=2,alpha = 0.6,grid = True,linestyle = "-",figsize=(20,5),)
plt.legend(loc='upper right')   
plt.xlabel('Price',fontsize = 15,color='black')             
plt.ylabel('Quantity',fontsize = 15,color='black')
plt.title('Quantity-Price Plot',fontsize = 20,color='black')

plt.show()

merged_dataframes['points'].value_counts().sort_index().plot(kind = 'line',color = 'b',label = 'points',linewidth=1, alpha = 0.6,grid = True,linestyle = '-',figsize=(18,5))
plt.legend(loc='upper right')   
plt.xlabel('Points',fontsize = 15,color='black')             
plt.ylabel('Quantity',fontsize = 15,color='black')
plt.title('Quantity-Points Plot',fontsize = 20,color='black')            
plt.show()

import re

# Define regular expression to extract year values
year_pattern = r'\d{4}'

# Convert "title" column to string data type
merged_dataframes['title'] = merged_dataframes['title'].astype(str)

# Extract year values from the "title" column using regular expression
merged_dataframes['year'] = merged_dataframes['title'].apply(lambda x: 
    next((y for y in re.findall(year_pattern, x) if 1934 <= int(y) <= 2024), None) 
    or next((y for y in re.findall(year_pattern, x) if 1934 <= int(y) <= 2024), None))

merged_dataframes.info()

merged_dataframes.head()

pd.options.display.max_rows = 20

merged_dataframes.isnull().sum()

import pandas as pd

merged_dataframes_year = merged_dataframes.dropna(subset=['year'])


# define the range of years for the categorical data
start_year = 1997
end_year = 2017

# create a list of years to check for
years_to_check = range(start_year, end_year + 1)

# loop through the years and create the categorical data columns
for year in years_to_check:
    col_name = f'is {year}'
    merged_dataframes_year[col_name] = (merged_dataframes_year['year'] == str(year)).astype(int)

merged_dataframes_year.columns

merged_dataframes_year.head(20)

merged_dataframes_year = merged_dataframes_year.drop(columns=['description', 'title'])
merged_dataframes_year

a = merged_dataframes.groupby('country').country.count()
a_dict = a.to_dict()

print(a_dict)

import pandas as pd

# create a sample dataframe with countries

#merged_dataframes_continent = merged_dataframes.dropna(subset=['country'])
merged_dataframes_continent = merged_dataframes.drop(columns=['description', 'title'])


# Define the countries and their corresponding continents
continents = {
    'European': ['Albania', 'Armenia', 'Austria', 'Bosnia and Herzegovina', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'England', 'France', 'Georgia', 'Germany', 'Greece', 'Hungary', 'Italy', 'Lithuania', 'Luxembourg', 'Macedonia', 'Moldova', 'Montenegro', 'Portugal', 'Romania', 'Serbia', 'Slovakia', 'Slovenia', 'Spain', 'Switzerland', 'Turkey', 'Ukraine'],
    'North American': ['Canada', 'Mexico', 'US', 'US-France'],
    'South American': ['Argentina', 'Brazil', 'Chile', 'Peru', 'Uruguay'],
    'Australian': ['Australia', 'New Zealand']
}
# loop through the continents and create the categorical data columns
for continent, countries in continents.items():
    col_name = f'is {continent}'
    merged_dataframes_continent[col_name] = merged_dataframes_continent['country'].isin(countries).astype(int)

# print the resulting dataframe
merged_dataframes_continent.head()

wine_dict = {
    'Red': ['Pinot Noir', 'Cabernet Sauvignon', 'Red Blend', 'Bordeaux-style Red Blend', 'Syrah', 'Merlot', 'Zinfandel', 'Sangiovese', 'Malbec', 'Nebbiolo', 'Portuguese Red', 'Tempranillo', 'Cabernet Franc', 'Rhône-style Red Blend', 'Shiraz', 'Corvina, Rondinella, Molinara', 'Grenache', 'Petite Sirah', 'Barbera', 'Tempranillo Blend', 'Carmenère', 'Meritage', 'Petit Verdot', 'Primitivo', 'Montepulciano', 'Dolcetto', 'Blaufränkisch', 'Mourvèdre', 'Zweigelt', 'Tinta de Toro', 'Touriga Nacional', 'Mencía', 'Cabernet Sauvignon-Merlot', 'G-S-M', 'Cabernet Blend', 'Pinotage', 'Pinot Nero', 'Tannat', 'Bonarda', 'Cabernet Sauvignon-Syrah', 'Nerello Mascalese', 'Sagrantino', 'Tinto Fino', 'St. Laurent', 'Agiorgitiko', 'Negroamaro', 'Carignan', 'Tempranillo-Cabernet Sauvignon', 'Monastrell', 'Nerello Mascalese', 'Bonarda'],
    'White': ['Chardonnay', 'Sauvignon Blanc', 'Riesling', 'White Blend', 'Pinot Gris', 'Grüner Veltliner', 'Bordeaux-style White Blend', 'Pinot Grigio', 'Viognier', 'Portuguese White', 'Chenin Blanc', 'Glera', 'Albariño', 'Pinot Blanc', 'Rhône-style White Blend', 'Moscato', 'Gewürztraminer', 'Verdejo', 'Sauvignon', 'Garganega', 'Torrontés', 'Vermentino', 'Melon', 'Verdicchio', 'Viura', 'Friulano', 'Greco', 'Godello', 'Marsanne', 'Austrian white blend', 'Semillon-Sauvignon Blanc', 'Tempranillo-Cabernet Sauvignon', 'Semillon-Sauvignon Blanc','Muscat', 'Pinot Bianco', 'Grillo', 'Turbiana', 'Verdicchio', 'Viura', 'Friulano', 'Greco', 'Vernaccia', 'Alvarinho', 'Grenache Blanc', 'Verdelho'],
    'Rosé': ['Rosé','Rosato'],
    'Sparkling': ['Sparkling Blend', 'Champagne Blend', 'Prosecco', 'Cava', 'Sherry']
}

import pandas as pd

# create a sample dataframe with countries

#merged_dataframes_variety = merged_dataframes.dropna(subset=['variety'])
merged_dataframes_variety = merged_dataframes.drop(columns=['description', 'title'])


# Define the countries and their corresponding continents
wine_dict = {
    'Red': ['Pinot Noir', 'Cabernet Sauvignon', 'Red Blend', 'Bordeaux-style Red Blend', 'Syrah', 'Merlot', 'Zinfandel', 'Sangiovese', 'Malbec', 'Nebbiolo', 'Portuguese Red', 'Tempranillo', 'Cabernet Franc', 'Rhône-style Red Blend', 'Shiraz', 'Corvina, Rondinella, Molinara', 'Grenache', 'Petite Sirah', 'Barbera', 'Tempranillo Blend', 'Carmenère', 'Meritage', 'Petit Verdot', 'Primitivo', 'Montepulciano', 'Dolcetto', 'Blaufränkisch', 'Mourvèdre', 'Zweigelt', 'Tinta de Toro', 'Touriga Nacional', 'Mencía', 'Cabernet Sauvignon-Merlot', 'G-S-M', 'Cabernet Blend', 'Pinotage', 'Pinot Nero', 'Tannat', 'Bonarda', 'Cabernet Sauvignon-Syrah', 'Nerello Mascalese', 'Sagrantino', 'Tinto Fino', 'St. Laurent', 'Agiorgitiko', 'Negroamaro', 'Carignan', 'Tempranillo-Cabernet Sauvignon', 'Monastrell', 'Nerello Mascalese', 'Bonarda'],
    'White': ['Chardonnay', 'Sauvignon Blanc', 'Riesling', 'White Blend', 'Pinot Gris', 'Grüner Veltliner', 'Bordeaux-style White Blend', 'Pinot Grigio', 'Viognier', 'Portuguese White', 'Chenin Blanc', 'Glera', 'Albariño', 'Pinot Blanc', 'Rhône-style White Blend', 'Moscato', 'Gewürztraminer', 'Verdejo', 'Sauvignon', 'Garganega', 'Torrontés', 'Vermentino', 'Melon', 'Verdicchio', 'Viura', 'Friulano', 'Greco', 'Godello', 'Marsanne', 'Austrian white blend', 'Semillon-Sauvignon Blanc', 'Tempranillo-Cabernet Sauvignon', 'Semillon-Sauvignon Blanc','Muscat', 'Pinot Bianco', 'Grillo', 'Turbiana', 'Verdicchio', 'Viura', 'Friulano', 'Greco', 'Vernaccia', 'Alvarinho', 'Grenache Blanc', 'Verdelho'],
    'Rosé': ['Rosé', 'Rosato'],
    'Sparkling': ['Sparkling Blend', 'Champagne Blend', 'Prosecco', 'Cava', 'Sherry']
}

# loop through the continents and create the categorical data columns
for colors, varieties in wine_dict.items():
    col_name = f'is {colors}'
    merged_dataframes_variety[col_name] = merged_dataframes_variety['variety'].isin(varieties).astype(int)

# print the resulting dataframe
merged_dataframes_variety.head()

country_counts = merged_dataframes.groupby('country').country.count()
sorted_coun = country_counts.sort_values()
top_ten_coun = sorted_coun.tail(10)
sorted_coun_dict = top_ten_coun.to_dict()

print(sorted_coun_dict)

#merged_dataframes_country = merged_dataframes.dropna(subset=['country'])
merged_dataframes_country = merged_dataframes.drop(columns=['description', 'title'])

# loop through the years and create the categorical data columns
for k in sorted_coun_dict:
    col_name = f'is {k}'
    merged_dataframes_country[col_name] = (merged_dataframes_country['country'] == str(k)).astype(int)

merged_dataframes_country.head()

variety_counts = merged_dataframes.groupby('variety').variety.count()
sorted_vari = variety_counts.sort_values()
top_ten_vari = sorted_vari.tail(10)
sorted_vari_dict = top_ten_vari.to_dict()

print(sorted_vari_dict)

#merged_dataframes_vari_10 = merged_dataframes.dropna(subset=['variety'])
merged_dataframes_vari_10 = merged_dataframes.drop(columns=['description', 'title'])

# loop through the years and create the categorical data columns
for k in sorted_vari_dict:
    col_name = f'is {k}'
    merged_dataframes_vari_10[col_name] = (merged_dataframes_vari_10['variety'] == str(k)).astype(int)

merged_dataframes_vari_10.head()

merged_dataframes_total = merged_dataframes.drop(columns=['description', 'title', 'variety', 'winery', 'province', 'country', 'year'])

merged_dataframes_total.head(5)

# loop through the years and create the categorical data columns
for k in sorted_vari_dict:
    col_name = f'is {k}'
    merged_dataframes_total[col_name] = (merged_dataframes_vari_10['variety'] == str(k)).astype(int)

# loop through the years and create the categorical data columns
for k in sorted_coun_dict:
    col_name = f'is {k}'
    merged_dataframes_total[col_name] = (merged_dataframes_country['country'] == str(k)).astype(int)

# loop through the continents and create the categorical data columns
for colors, varieties in wine_dict.items():
    col_name = f'is {colors}'
    merged_dataframes_total[col_name] = merged_dataframes_variety['variety'].isin(varieties).astype(int)

# loop through the continents and create the categorical data columns
for continent, countries in continents.items():
    col_name = f'is {continent}'
    merged_dataframes_total[col_name] = merged_dataframes_continent['country'].isin(countries).astype(int)

for year in years_to_check:
    col_name = f'is {year}'
    merged_dataframes_total[col_name] = (merged_dataframes_year['year'] == str(year)).astype(int)

merged_dataframes_total.head(20)

merged_dataframes_total.isnull().sum()

null_counts = merged_dataframes_total.isnull().sum()

# print columns with null values and their respective null counts
null_cols = null_counts[null_counts > 0]
null_cols

