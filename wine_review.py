# -*- coding: utf-8 -*-
"""wine_reviews copy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pgEliNce0qiWodlSjS9hKmBuHt-Jp9cm
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
reviews = pd.read_csv('/content/drive/My Drive/wine_rev/winemag-data-130k-v2.csv', index_col=0)
pd.set_option("display.max_rows", 5)

reviews_150 = pd.read_csv('/content/drive/My Drive/wine_rev/150k cleaned.csv', index_col=0)

reviews.country

reviews.dtypes

#reviews['country'][0]
#reviews.iloc[0]
reviews.loc[(reviews.country == 'Italy') & (reviews.points >= 90)]

reviews.loc[reviews.price.notnull()]

reviews[reviews.country.isnull()]

reviews.isnull().sum()

reviews.info()

reviews = reviews.drop_duplicates()
reviews.info()

reviews_150 = reviews_150.drop_duplicates()
reviews_150.info()

reviews.groupby('points').points.count()

reviews.groupby('points').price.min()

reviews.head()

countries_reviewed = reviews.groupby(['country', 'province']).description.agg([len])
countries_reviewed

countries_reviewed = countries_reviewed.reset_index()
countries_reviewed.sort_values(by='len', ascending=False)

countries_reviewed.sort_index()

countries_reviewed.sort_values(by=['country', 'len'])

import seaborn as sns
from matplotlib import pyplot as plt
from statsmodels.graphics.gofplots import qqplot

def Box_plots(df):
    plt.figure(figsize=(10, 4))
    plt.title("Box Plot")
    sns.boxplot(df)
    plt.show()
Box_plots(reviews['points'])

def hist_plots(df):
    plt.figure(figsize=(10, 4))
    plt.hist(df)
    plt.title("Histogram Plot")
    plt.show()
hist_plots(reviews['points'])

def scatter_plots(df1,df2):
    fig, ax = plt.subplots(figsize=(10,4))
    ax.scatter(df1,df2)
    ax.set_xlabel('Points')
    ax.set_ylabel('Price')
    plt.title("Scatter Plot")
    plt.show()
scatter_plots(reviews['points'],reviews['price'])

def dist_plots(df):
    plt.figure(figsize=(10, 4))
    sns.distplot(df)
    plt.title("Distribution plot")
    sns.despine()
    plt.show()
dist_plots(reviews['points'])

pd.set_option("display.max_rows", 13)
reviews = reviews.dropna(subset=['country'])

reviews.isnull().sum()

pd.set_option("display.max_rows", 5)

reviews.head()

dfr = reviews.drop(columns=['region_1','region_2','taster_name','taster_twitter_handle'])

dataframe = reviews_150.drop(columns=['region_1','region_2', 'designation'])

dfr = dfr.drop(columns=['designation'])

dfr.info()

dataframe.info()

reviews.info()

import numpy as np
sns.boxplot(dfr['points'])
plt.title("Box Plot before outlier removing")
plt.show()
def drop_outliers(df, field_name):
    iqr = 1.5 * (np.percentile(df[field_name], 75) - np.percentile(df[field_name], 25))
    df.drop(df[df[field_name] > (iqr + np.percentile(df[field_name], 75))].index, inplace=True)
    df.drop(df[df[field_name] < (np.percentile(df[field_name], 25) - iqr)].index, inplace=True)
drop_outliers(dfr, 'points')
sns.boxplot(dfr['points'])
plt.title("Box Plot after outlier removing")
plt.show()

import plotly.graph_objs as go

df5 = dfr.iloc[:1000,:]
trace1 = go.Scatter(
    x=df5.index,
    y=df5.price,
    name = "price"
)
trace2 = go.Scatter(
    x=df5.index,
    y=df5.points,
    xaxis='x2',
    yaxis='y2',
    name = "points"
)
trace3 = go.Scatter(
    x=df5.index,
    y=df5.country.value_counts().values,
    xaxis='x3',
    yaxis='y3',
    name = "country"
)

data_05 = [trace1, trace2, trace3]
layout = go.Layout(
    xaxis=dict(
        domain=[0, 0.45]
    ),
    yaxis=dict(
        domain=[0, 0.45]
    ),
    xaxis2=dict(
        domain=[0.55, 1]
    ),
    xaxis3=dict(
        domain=[0, 0.45],
        anchor='y3'
    ),
    xaxis4=dict(
        domain=[0.55, 1],
        anchor='y4'
    ),
    yaxis2=dict(
        domain=[0, 0.45],
        anchor='x2'
    ),
    yaxis3=dict(
        domain=[0.55, 1]
    ),
    yaxis4=dict(
        domain=[0.55, 1],
        anchor='x4'
    ),
    title = 'Price, Points, Country of Wines'
)
fig = go.Figure(data=data_05, layout=layout)
fig.show()

"""pip install wordcloud

from wordcloud import WordCloud

df_01 = dfr.country[dfr.country.count()>= 150]
plt.subplots(figsize=(8,8))
wordcloud = WordCloud(
                          background_color='grey',
                          width=512,
                          height=384
                         ).generate(" ".join(df_01))
plt.imshow(wordcloud)
plt.axis('off')
plt.savefig('graph.png')

plt.show()
"""

ax=(dfr['country'].value_counts().head(15) / len(dfr)).plot.bar(figsize=(14,6))
ax.set_title("Percentage of Top 15 Countries", fontsize=20,color= "magenta")
plt.grid()

import matplotlib.pyplot as plt
import seaborn as sns  # visualization tool

dfr.country = dfr.country.fillna("")
dfr.country.replace([""],"Unknown",inplace=True)
dfr.price= dfr.price.fillna("")
dfr.price.replace([""],0.0,inplace = True)
dfr.price =dfr.price.astype(float)
#data.price
area_list = list(dfr.country.unique())
area_price_ratio = []
for i in area_list:
    x = dfr[dfr.country==i]
    area_price_rate = sum(x.price)/len(x)
    area_price_ratio.append(area_price_rate)
    #print(i,len(x),area_price_rate)

data_1 = pd.DataFrame({'area_list': area_list,'area_price_ratio':area_price_ratio})
new_index = (data_1['area_price_ratio'].sort_values(ascending=False)).index.values
sorted_data1 = data_1.reindex(new_index)

plt.figure(figsize=(15,10))
sns.barplot(x=sorted_data1['area_list'], y=sorted_data1['area_price_ratio'])
plt.xticks(rotation= 90)
plt.xlabel('Country',fontsize = 15,color='blue')
plt.ylabel('Price Rate',fontsize = 15,color='blue')
plt.title('Price Rate Given Countries',fontsize = 20,color='blue')
plt.savefig('graph.png')
plt.grid()

ax=dfr['winery'].value_counts().head(30).plot.bar(figsize=(14,6))
ax.set_title("Top 30 Wineries", fontsize=20,color="magenta")
plt.xlabel('Name of Wineries',fontsize = 15,color='blue')
plt.ylabel('Frequency',fontsize = 15,color='blue')
plt.grid()

varities_df = dfr['variety'].value_counts()

variety = dataframe['variety'].value_counts()

variety_counts_df = pd.DataFrame(dfr['variety'].value_counts()).reset_index()
variety_counts_df.columns = ['variety', 'count']

variety_counts = pd.DataFrame(dataframe['variety'].value_counts()).reset_index()
variety_counts.columns = ['variety', 'count']

variety_counts_df

variety_counts

# set the max_rows option to None
pd.set_option('display.max_rows', None)

# filter the dataframe to only include rows where the count is greater than 100
variety_counts_filtered = variety_counts[variety_counts['count'] > 100]


# display the entire filtered dataframe
print(variety_counts_filtered)

# set the max_rows option to None
pd.set_option('display.max_rows', None)

# filter the dataframe to only include rows where the count is greater than 100
variety_counts_df_filtered = variety_counts_df[variety_counts_df['count'] > 100]


# display the entire filtered dataframe
print(variety_counts_df_filtered)

color_dict = {
    'Pinot Noir': 'Red',
    'Chardonnay': 'White',
    'Cabernet Sauvignon': 'Red',
    'Red Blend': 'Red',
    'Bordeaux-style Red Blend': 'Red',
    'Riesling': 'White',
    'Sauvignon Blanc': 'White',
    'Syrah': 'Red',
    'Rosé': 'Rosé',
    'Merlot': 'Red',
    'Nebbiolo': 'Red',
    'Zinfandel': 'Red',
    'Sangiovese': 'Red',
    'Malbec': 'Red',
    'Portuguese Red': 'Red',
    'White Blend': 'White',
    'Sparkling Blend': 'Sparkling',
    'Tempranillo': 'Red',
    'Rhône-style Red Blend': 'Red',
    'Pinot Gris': 'White',
    'Champagne Blend': 'Sparkling',
    'Cabernet Franc': 'Red',
    'Grüner Veltliner': 'White',
    'Portuguese White': 'White',
    'Bordeaux-style White Blend': 'White',
    'Pinot Grigio': 'White',
    'Gewürztraminer': 'White',
    'Gamay': 'Red',
    'Viognier': 'White',
    'Shiraz': 'Red',
    'Petite Sirah': 'Red',
    'Sangiovese Grosso': 'Red',
    'Glera': 'Sparkling',
    'Barbera': 'Red',
    'Port': 'Red',
    'Grenache': 'Red',
    'Corvina, Rondinella, Molinara': 'Red',
    'Tempranillo Blend': 'Red',
    'Chenin Blanc': 'White',
    'Carmenère': 'Red',
    'Albariño': 'White',
    'Pinot Blanc': 'White',
    'Rhône-style White Blend': 'White',
    'Aglianico': 'Red',
    'Moscato': 'White',
    'Nero d\'Avola': 'Red',
    'Garnacha': 'Red',
    'Sauvignon': 'White',
    'Verdejo': 'White',
    'Melon': 'White',
    'Petit Verdot': 'Red',
    'Garganega': 'White',
    'Meritage': 'Red',
    'Torrontés': 'White',
    'Prosecco': 'Sparkling',
    'Blaufränkisch': 'Red',
    'Mourvèdre': 'Red',
    'Primitivo': 'Red',
    'Vermentino': 'White',
    'Montepulciano': 'Red',
    'Zweigelt': 'Red',
    'Touriga Nacional': 'Red',
    'Dolcetto': 'Red',
    'G-S-M': 'Red',
    'Pinot Nero': 'Red',
    'Tannat': 'Red',
    'Mencía': 'Red',
    'Roussanne': 'White',
    'Tinta de Toro': 'Red',
    'Verdicchio': 'White',
    'Pinot Bianco': 'White',
    'Fiano': 'White',
    'Turbiana': 'White',
    'Sémillon': 'White',
    'Monastrell': 'Red',
    'Pinotage': 'Red',
    'Muscat': 'White',
    'Vernaccia': 'White',
    'Alvarinho': 'White',
    'Grenache Blanc': 'White',
    'Grillo': 'White',
    'Cabernet Sauvignon-Merlot': 'Red',
    'Friulano': 'White',
    'Nerello Mascalese': 'Red',
    'Greco': 'White',
    'Viura': 'White',
    'Pinot Noir': 'Red',
    'Chardonnay': 'White',
    'Cabernet Sauvignon': 'Red',
    'Red Blend': 'Red',
    'Bordeaux-style Red Blend': 'Red',
    'Sauvignon Blanc': 'White',
    'Syrah': 'Red',
    'Riesling': 'White',
    'Merlot': 'Red',
    'Zinfandel': 'Red',
    'Sangiovese': 'Red',
    'Malbec': 'Red',
    'Rosé': 'Rosé',
    'White Blend': 'White',
    'Tempranillo': 'Red',
    'Portuguese Red': 'Red',
    'Nebbiolo': 'Red',
    'Sparkling Blend': 'Sparkling', # could be white or pink
    'Shiraz': 'Red',
    'Corvina, Rondinella, Molinara': 'Red',
    'Rhône-style Red Blend': 'Red',
    'Pinot Gris': 'White',
    'Cabernet Franc': 'Red',
    'Sangiovese Grosso': 'Red',
    'Viognier': 'White',
    'Bordeaux-style White Blend': 'White',
    'Pinot Grigio': 'White',
    'Champagne Blend': 'Sparkling', # could be white or pink
    'Grüner Veltliner': 'White',
    'Port': 'Red',
    'Gewürztraminer': 'White',
    'Barbera': 'Red',
    'Portuguese White': 'White',
    'Petite Sirah': 'Red',
    'Carmenère': 'Red',
    'Tempranillo Blend': 'Red',
    'Chenin Blanc': 'White',
    'Grenache': 'Red',
    'Gamay': 'Red',
    'Albariño': 'White',
    'Prosecco': 'Sparkling', # sparkling white
    'Glera': 'Sparkling', # sparkling white
    'Pinot Blanc': 'White',
    'Moscato': 'White',
    'Nero d\'Avola': 'Red',
    'Rhône-style White Blend': 'White',
    'Garnacha': 'Red',
    'Aglianico': 'Red',
    'Torrontés': 'White',
    'Garganega': 'White',
    'Verdejo': 'White',
    'Meritage': 'Red',
    'Dolcetto': 'Red',
    'Cabernet Blend': 'Red',
    'Primitivo': 'Red',
    'Sauvignon': 'White',
    'Montepulciano': 'Red',
    'Cabernet Sauvignon-Merlot': 'Red',
    'Petit Verdot': 'Red',
    'Sémillon': 'White',
    'Tinta de Toro': 'Red',
    'Blaufränkisch': 'Red',
    'Vermentino': 'White',
    'Zweigelt': 'Red',
    'Pinotage': 'Red',
    'Mourvèdre': 'Red',
    'Mencía': 'Red',
    'Touriga Nacional': 'Red',
    'Roussanne': 'White',
    'Fiano': 'White',
    'Muscat': 'White',
    'Grillo': 'White',
    'Bonarda': 'Red',
    'G-S-M': 'Red'

}

dataframe['color'] = dataframe['variety'].map(color_dict)

dataframe.info()

dataframe.to_csv('filename.csv', sep=',', index=False)

# use map() to apply the dictionary to the variety column and create a new color column
variety_counts_filtered['color'] = variety_counts_filtered['variety'].map(color_dict)

# print the updated dataframe
print(variety_counts_filtered)

# use map() to apply the dictionary to the variety column and create a new color column
variety_counts_df_filtered['color'] = variety_counts_df_filtered['variety'].map(color_dict)

# print the updated dataframe
print(variety_counts_df_filtered)

total_count_by_color = variety_counts_df_filtered.groupby('color')['count'].sum()

total_count_by_color

colors_total = variety_counts_filtered.groupby('color')['count'].sum()
colors_total

import matplotlib.pyplot as plt
import seaborn as sns

color_map = {
    'Red': '#870101',
    'White': '#ebd8bc',
    'Rosé': '#f7bcbc',
    'Sparkling': '#9aaeb3'
}

# Group the rows by the "color" column
groups = variety_counts_df_filtered.groupby('color')

# Create a figure and axis object
fig, ax = plt.subplots(figsize=(16,8))

# Set the x-axis and y-axis labels
ax.set_xlabel('Variety')
ax.set_ylabel('Count')

# Loop over the groups
for name, group in groups:
    # Add a bar chart for the group with the corresponding color
    ax.bar(group['variety'], group['count'], color=color_map[name], label=name)

# Add a legend
ax.legend()

ax.tick_params(axis='x', rotation=90)

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

color_map = {
    'Red': '#870101',
    'White': '#ebd8bc',
    'Rosé': '#f7bcbc',
    'Sparkling': '#9aaeb3'
}

# Group the rows by the "color" column
groups = variety_counts_filtered.groupby('color')

# Create a figure and axis object
fig, ax = plt.subplots(figsize=(16,8))

# Set the x-axis and y-axis labels
ax.set_xlabel('Variety')
ax.set_ylabel('Count')

# Loop over the groups
for name, group in groups:
    # Add a bar chart for the group with the corresponding color
    ax.bar(group['variety'], group['count'], color=color_map[name], label=name)

# Add a legend
ax.legend()

ax.tick_params(axis='x', rotation=90)

# Show the plot
plt.show()

dataframe.to_csv('filename.csv', sep=',', index=False)

import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt

pip install pycountry

import pycountry 
def alpha3code(column):
    CODE=[]
    for country in column:
        try:
            code=pycountry.countries.get(name=country).alpha_3
           # .alpha_3 means 3-letter country code 
           # .alpha_2 means 2-letter country code
            CODE.append(code)
        except:
            CODE.append('None')
    return CODE
# create a column for code 
dfr['CODE']=alpha3code(dfr.country)
dfr.loc[dfr.country == 'US', 'CODE'] = 'USA'
dfr.loc[dfr.country == 'England', 'CODE'] = 'GBR'
dfr.loc[dfr.country == 'Czech Republic', 'CODE'] = 'CZE'
dfr.loc[dfr.country == 'Macedonia', 'CODE'] = 'MKD'
dfr.loc[dfr.country == 'Moldova', 'CODE'] = 'MDA'

dfr.head()

df_countries = dfr.groupby(['country', 'CODE'], 
                               as_index=False).agg({'variety': pd.Series.count})
df_countries.sort_values('variety', ascending=False)

world_map = px.choropleth(df_countries,
                          locations='CODE',
                          color='variety', 
                          hover_name='country', 
                          color_continuous_scale=px.colors.sequential.matter)
 
world_map.update_layout(coloraxis_showscale=True,)
 
world_map.show()

# Define a function to map province names to province codes
def get_province_code(country, province):
    # Check if the country is United States
    if country == "US":
        # Define a dictionary of province codes
        us_prov_codes = {
            "Alabama": "AL",
            "Alaska": "AK",
            "Arizona": "AZ",
            "Arkansas": "AR",
            "California": "CA",
            "Colorado": "CO",
            "Connecticut": "CT",
            "Delaware": "DE",
            "Florida": "FL",
            "Georgia": "GA",
            "Hawaii": "HI",
            "Idaho": "ID",
            "Illinois": "IL",
            "Indiana": "IN",
            "Iowa": "IA",
            "Kansas": "KS",
            "Kentucky": "KY",
            "Louisiana": "LA",
            "Maine": "ME",
            "Maryland": "MD",
            "Massachusetts": "MA",
            "Michigan": "MI",
            "Minnesota": "MN",
            "Mississippi": "MS",
            "Missouri": "MO",
            "Montana": "MT",
            "Nebraska": "NE",
            "Nevada": "NV",
            "New Hampshire": "NH",
            "New Jersey": "NJ",
            "New Mexico": "NM",
            "New York": "NY",
            "North Carolina": "NC",
            "North Dakota": "ND",
            "Ohio": "OH",
            "Oklahoma": "OK",
            "Oregon": "OR",
            "Pennsylvania": "PA",
            "Rhode Island": "RI",
            "South Carolina": "SC",
            "South Dakota": "SD",
            "Tennessee": "TN",
            "Texas": "TX",
            "Utah": "UT",
            "Vermont": "VT",
            "Virginia": "VA",
            "Washington": "WA",
            "West Virginia": "WV",
            "Wisconsin": "WI",
            "Wyoming": "WY"
        }
        # Look up the province code in the dictionary
        return us_prov_codes.get(province)
    else:
        return None

# Apply the function to create a new column for province codes
dfr["prov_code"] = dfr.apply(lambda x: get_province_code(x["country"], x["province"]), axis=1)

# Group by country and province, and mean the values
grouped_df = dfr.groupby(["country", "province", "prov_code"]).mean().reset_index()

test_df_2 = dfr.groupby(["country"]).mean().reset_index()
province_count_2 = dfr.groupby("country")["points"].count().reset_index()
province_count_2 = province_count_2.rename(columns={"points": "count"})

test_df_2 = test_df_2.merge(province_count_2, on="country", how="left")

# For every province, not only US
province_count = dfr.groupby("province")["points"].count().reset_index()
province_count

import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(16,12), dpi=100)

ax = sns.scatterplot(data=test_df_2,
                     x='price', 
                     y='points',
                     hue='country', # colour
                     size='count', # dot size
                     sizes=(10, 2000), # min and max size of dots
                     size_norm=matplotlib.colors.PowerNorm(0.5)) # power scaling

ax.set(
       ylabel='Average Points',
       xlabel='Average Prices',)

plt.show()

# For every US province; get price mean, points mean, occurrences

test_df = dfr.groupby(["country", "province", "prov_code"]).mean().reset_index()

province_count = dfr.groupby("province")["points"].count().reset_index()
province_count = province_count.rename(columns={"points": "count"})

test_df = test_df.merge(province_count, on="province", how="left")

test_df

dfr.head(45)

grouped_df

import plotly.graph_objects as go

import pandas as pd

fig = go.Figure(data=go.Choropleth(
    locations=grouped_df['prov_code'], # Spatial coordinates
    z = grouped_df['points'].astype(float), # Data to be color-coded
    locationmode = 'USA-states', # set of locations match entries in `locations`
    colorscale = 'Reds',
    colorbar_title = "USD",
))

fig.update_layout(
    title_text = 'Points by State',
    geo_scope='usa', # limite map scope to USA
)

fig.show()

import plotly.graph_objects as go

import pandas as pd

fig = go.Figure(data=go.Choropleth(
    locations=grouped_df['prov_code'], # Spatial coordinates
    z = grouped_df['price'].astype(float), # Data to be color-coded
    locationmode = 'USA-states', # set of locations match entries in `locations`
    colorscale = 'Reds',
    colorbar_title = "USD",
))

fig.update_layout(
    title_text = 'Prices by State',
    geo_scope='usa', # limite map scope to USA
)

fig.show()

ax=dfr['variety'].value_counts().head(30).plot.bar(figsize=(14,6))
ax.set_title("Top 30 Wine Varieties", fontsize=20,color="magenta")
plt.grid()

ax= dfr['points'].value_counts().sort_index().plot.bar(
figsize=(14,6))
ax.set_title("Points", fontsize=20,color="magenta")
plt.grid()

dfr.head()

dfr['price'].value_counts().sort_index().head(150).plot(kind = 'line', color = 'r',
label = 'price',linewidth=2,alpha = 0.6,grid = True,linestyle = "-",figsize=(20,5),)
plt.legend(loc='upper right')   
plt.xlabel('Price',fontsize = 15,color='black')             
plt.ylabel('Quantity',fontsize = 15,color='black')
plt.title('Quantity-Price Plot',fontsize = 20,color='black')

plt.show()

dfr['points'].value_counts().sort_index().plot(kind = 'line',color = 'b',label = 'points',linewidth=1, alpha = 0.6,grid = True,linestyle = '-',figsize=(18,5))
plt.legend(loc='upper right')   
plt.xlabel('Points',fontsize = 15,color='black')             
plt.ylabel('Quantity',fontsize = 15,color='black')
plt.title('Quantity-Points Plot',fontsize = 20,color='black')            
plt.show()

dfr.country.dropna(inplace = True)
labels = dfr.country.value_counts().index
labels_1=(labels[0:12])
colors = ['grey','blue','red','yellow','green','brown',"lime","cyan","magenta","purple","yellow","pink"]
explode = [0,0,0,0,0,0,0,0,0,0,0,0]
sizes = dfr.country.value_counts().values
array_1=(sizes[0:12])

# visual
plt.figure(figsize = (10,10))
plt.pie(array_1, explode=explode, labels=labels_1, colors=colors, autopct='%1.1f%%')
plt.title('Percentage per Country',color = 'blue',fontsize = 15)
plt.savefig('graph.png')
plt.show()

ax=dfr['title'].value_counts().head(30).plot.bar(figsize=(14,6))
ax.set_title("Top 30 Wine Titles", fontsize=20,color="magenta")
plt.grid()

dfr.info()
dfr.title.unique

dfr.title.sort_index()

title_named_sort = dfr.title.sort_values(ascending=False)

from pathlib import Path  
#filepath = Path('/Users/hakankorpe/Desktop/dsasadasd.csv')  
#filepath.parent.mkdir(parents=True, exist_ok=True)  
#title_named_sort.to_csv(filepath)

dfr.info()

dfr.head()

pd.options.display.max_rows = 20

province_counts = dfr['province'].value_counts()
print(province_counts)

province_frequencies = dfr['province'].value_counts(normalize=True)
print(province_frequencies)

cal_unq_count = dfr.groupby('province')['title'].nunique().loc['California']
print(f"California wine count: {province_counts.loc['California']}, Unique California wines: {cal_unq_count}")
wash_unq_count = dfr.groupby('province')['title'].nunique().loc['Washington']
print(f"Washington wine count: {province_counts.loc['Washington']}, Unique Washington wines: {wash_unq_count}")

print(dfr["description"].nunique())
desc_counts = dfr['description'].value_counts()
print(desc_counts)

dfr.isnull().sum()

dfr.info()

grouped_df_desc = dfr.groupby('description')

# Define a function that displays the values of the 'province' column for each group
def print_province(group):
    return group.index

# Apply the function to each group
result = grouped_df_desc.apply(print_province)

print(result)

dfr.describe()

pd.set_option("display.max_rows", 42)
dfr.groupby("country").mean()



l_chart = px.line(variety_counts_filtered,
                  x='variety', 
                  y='count',
                  color='color',
                  hover_name='color')
 
l_chart.update_layout(xaxis_title='Year',
                      yaxis_title='Number of Prizes')
 
l_chart.show()

with sns.axes_style('whitegrid'):
    sns.lmplot(data=variety_counts_filtered,
               x='variety', 
               y='count',
               row = 'color',
               lowess=True, 
               aspect=2,
               scatter_kws = {'alpha': 0.6},
               line_kws = {'color': 'black'},)
 
plt.show()

test_df

plt.figure(figsize=(16,12), dpi=300)
ax = sns.scatterplot(data=test_df,
                     x='price', 
                     y='points',
                     hue='province', # colour
                     size='count',) # dot size
 
ax.set(
       ylabel='Average Points',
       xlabel='Average Prices',)
 
plt.show()

import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(16,12), dpi=100)

ax = sns.scatterplot(data=test_df,
                     x='price', 
                     y='points',
                     hue='province', # colour
                     size='count', # dot size
                     sizes=(10, 2000), # min and max size of dots
                     size_norm=matplotlib.colors.PowerNorm(0.5)) # power scaling

ax.set(
       ylabel='Average Points',
       xlabel='Average Prices',)

plt.show()

sns.regplot(data=grouped_df, 
            x='price',
            y='points')

plt.figure(figsize=(8,4), dpi=200)
with sns.axes_style("whitegrid"):
  sns.regplot(data=grouped_df, 
            x='price', 
            y='points',
            scatter_kws = {'alpha': 0.4},
            line_kws = {'color': 'black'})

import json
import folium

import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer


nltk.download('vader_lexicon')
# initialize the sentiment analyzer
sia = SentimentIntensityAnalyzer()

# the text to analyze
text = "This tremendous 100% varietal wine hails from Oakville and was aged over three years in oak. Juicy red-cherry fruit and a compelling hint of caramel greet the palate, framed by elegant, fine tannins and a subtle minty tone in the background. Balanced and rewarding from start to finish, it has years ahead of it to develop further nuance. Enjoy 2022–2030."

# analyze the sentiment of the text
sentiment = sia.polarity_scores(text)

# print the sentiment scores
print(sentiment)

